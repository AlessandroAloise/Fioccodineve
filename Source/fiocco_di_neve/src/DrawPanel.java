import java.awt.Color;
import java.awt.Graphics;
import java.awt.Graphics2D;
import java.awt.Point;
import java.awt.Polygon;
import java.awt.RenderingHints;
import java.awt.event.MouseEvent;
import java.util.ArrayList;
import java.util.List;

/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */
/**
 *
 * @author alesa
 */
public class DrawPanel extends javax.swing.JPanel {

    private List<Point> points = new ArrayList<Point>();
    /**
     * generazione del poligono.
     */
    private Polygon polygon = new Polygon();

    public Color colore = Color.red;

    public boolean colore1 = true;

    public boolean render = false;

    public int larghezzaV = 1024;
    public int altezzaV = 768;

    public int larghezzaN = 0;
    public int altezzaN = 0;

    /**
     * Creates new form DrawPanel
     */
    public DrawPanel() {
        initComponents();
        this.setSize(1024, 768);
    }

    /**
     * Resetta i punti sullo schermo e il cololore dei punti.
     */
    public void reset() {
        points.clear();
        repaint();
        colore = Color.red;
    }

    /**
     * Viene invocato quando viene premuto il tasto render modifica il colore
     * visivo.
     */
    public void render() {
        if (colore1 == true) {
            colore = Color.gray;
            repaint();
            colore1 = false;
            render = true;
        } else {
            colore = Color.red;
            repaint();
            colore1 = true;
            render = false;
        }

    }

    @Override
    public void paintComponent(Graphics g) {
        Graphics2D graphics2D = (Graphics2D) g;
        graphics2D.setRenderingHint(RenderingHints.KEY_ANTIALIASING,
                RenderingHints.VALUE_ANTIALIAS_ON);
        g.setColor(Color.gray);
        g.fillRect(0, 0, getWidth() / 2, getHeight());
        g.setColor(Color.WHITE);
        int npoints = 3;
        g.fillPolygon(ridimensiomanetoX(), ridimensiomanetoY(), npoints);
        for (int i = 0; i < points.size(); i++) {
            polygon.addPoint(points.get(i).x, points.get(i).y);
        }
        g.setColor(colore);
        for (int i = 0; i < points.size(); i++) {
            g.fillOval(points.get(i).x - 3, points.get(i).y, 6, 6);
            if (i > 1) {
                g.fillPolygon(polygon);
                this.polygon.reset();
            }
        }
    }

    public int[] ridimensiomanetoX() {
        // a
        // b é lunga il doppio di a  
        // h é lungua b per 1,7
        int[] x = new int[3];
        int bordo = getWidth() / 10;
        int a = getWidth() / 4;
        int b = a * 2;
        double h = b * 1.7;
        x[0] = bordo;
        x[1] = bordo + a;
        x[2] = bordo;
        return x;
    }

    public int[] ridimensiomanetoY() {
        int a = getWidth() / 4;
        double h = a * 1.7;
        int[] y = new int[3];
        y[0] = (getHeight() / 4);
        y[1] = (getHeight() / 4);
        y[2] = (getHeight() / 4 + (int) h);
        return y;
    }

    public void ridimensionamentoP() {
        int differenzax = 0;
        int differenzay = 0;
        for (int i = 0; i < points.size(); i++) {
            if (larghezzaV > larghezzaN || altezzaV > altezzaN) {
                differenzax = larghezzaN - larghezzaV;
                differenzay = altezzaN - altezzaV;
                points.get(i).x = points.get(i).x + differenzax / 4;
                points.get(i).y = points.get(i).y + differenzay / 4;

            } else {
                differenzax = larghezzaV - larghezzaN;
                differenzay = altezzaV - altezzaN;
                points.get(i).x = points.get(i).x - differenzax / 4;
                points.get(i).y = points.get(i).y - differenzay / 4;
            }
        }
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                formMouseClicked(evt);
            }
            public void mouseReleased(java.awt.event.MouseEvent evt) {
                formMouseReleased(evt);
            }
        });
        addComponentListener(new java.awt.event.ComponentAdapter() {
            public void componentResized(java.awt.event.ComponentEvent evt) {
                formComponentResized(evt);
            }
        });

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(this);
        this.setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGap(0, 400, Short.MAX_VALUE)
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGap(0, 300, Short.MAX_VALUE)
        );
    }// </editor-fold>//GEN-END:initComponents

    private void formMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_formMouseClicked

    }//GEN-LAST:event_formMouseClicked

    private void formMouseReleased(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_formMouseReleased
        if (MouseEvent.BUTTON3 == evt.getButton()) {
            for (int i = 0; i < points.size(); i++) {
                if (evt.getPoint() == points.get(i)) {
                    points.remove(i);
                }
            }
        } else {
            Point p = evt.getPoint();
            if (p.x < getWidth() / 2) {
                this.points.add(evt.getPoint());
                repaint();
            }
        }
    }//GEN-LAST:event_formMouseReleased

    private void formComponentResized(java.awt.event.ComponentEvent evt) {//GEN-FIRST:event_formComponentResized
        larghezzaN = this.getWidth();
        altezzaN = this.getHeight();
        ridimensionamentoP();
        larghezzaV = larghezzaN;
        altezzaV = altezzaN;
    }//GEN-LAST:event_formComponentResized

    // Variables declaration - do not modify//GEN-BEGIN:variables
    // End of variables declaration//GEN-END:variables
}
